extends layout/layout-pages
block hero
    h1 Ongoing Developments
    p
        | The future
block text
    :markdown

        Nine: Fully Distributed, Scalable Architecture
        ----------------------------------------------

        Buildbot’s developers, including the authors, are working to
        re-formulate the tool as a collection loosely coupled components. These
        components are linked by a common database back-end and a message bus.
        They can be combined arbitrarily across multiple hosts to create build,
        test, and release systems precisely suited to users’ organizations.

        This design allows redundant clustered implementations, resilient to the
        failure of any single component and able to scale to meet load
        requirements. The language-agnostic interfaces between components allow
        integration with other tools in an organization. For example, Buildbot
        messages can be duplicated into an enterprise message bus and used to
        correlate build activity with other enterprise events.

        The design also fixes a substantial performance problem in current
        versions of Buildbot. Web status views are currently generated on the
        buildmaster using inefficient methods which can take up to 0.8s per
        page, and which block all other activity on the master during
        generation. This makes it unwise or impossible to expose the Buildbot
        web interface to a wide audience. In the new design, the web status
        views are rendered in the browser, significantly reducing load on
        masters. As a further advantage, the master can send status updates
        directly to the web browser, so users see updated results without
        reloading the page.

        The architecture is split into three layers: DB, MQ, and Data. The DB
        layer abstracts a shared relational database, supporting several common
        database packages. The API presented by this layer is Python-only, and
        is closely tied to the database schema.

        The MQ layer implements a pluggable message queuing system. Like the DB
        layer, it supports several external backends, including RabbitMQ and
        ZeroMQ. This layer distributes messages among all masters, providing
        notification of new events. For example, when a build is complete, the
        master processing that build sends a message. Message consumers might
        react to that message by sending email, notifying users on IRC, or
        updating the display in a user’s browser.

        The Data layer combines access to stored state and messages, and exposes
        a well-defined API that can be used both within Buildbot and by external
        tools. This layer is influenced by REST, and available both via HTTP and
        as a native Python interface. Buildbot components use the data API to
        communicate with other components.

        This initiative is nicknamed ’nine’, because it is targeting Buildbot
        version 0.9.0. This is a signficant refactor of the Buildbot codebase,
        and work is slow due to the need to maintain compatibility. As of this
        writing, most of the Data API is complete, and a proof-of-concept web
        interface has been written, but all status listeners remain unmodified.
        Time estimtes are difficult for any open-source project, but it is
        likely that the project will be complete in late 2014.

        One-Oh: Well-Defined APIs
        -------------------------

        Buildbot is a fairly mature project, and has grown considerably since it
        was created over a decade ago. Much of that growth had been organic,
        driven by small contributions from users, with little coordination of
        effort. The documentation, while describing the configuration options,
        does not give much detail on how to customize Buildbot—hardly ideal for
        an application framework. Lacking other guidance, users treat the source
        code as documentation, which means that the effective API surface of
        Buildbot has become large and ill-defined. This has led to difficulty
        for users in upgrading Buildbot, and made development of Buildbot itself
        difficult as quirks of the existing APIs hinder implementation of new
        features.

        The fix is to define new APIs, make compatibility commitments about
        those APIs, and put tools in place to guarantee correctness and
        compatibility. These APIs will include the Data API, as well as Python
        interfaces for custom change sources, schedulers, steps, and
        status-handling components. The APIs will be fully documented, with
        thorough unit and interface tests measuring the implementation’s
        behavior and adherence to the documentation. Any changes to the API will
        be handled carefully and communicated clearly to Buildbot’s users.

        It is unrealistic to expect the first Buildbot release implementing the
        Data API to get everything right. Rather than commit to strict API
        compatibility beginning with Buildbot-0.9.0, the developers plan to
        allow the new APIs to "settle in" throughout the 0.9.x series. Once
        Buildbot reaches version 1.0.0, the APIs will be fixed, and changes
        handled using accepted semantic-versioning techniques@semver.
